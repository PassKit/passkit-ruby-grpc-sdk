# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/core/a_rpc_distribution.proto

require 'google/protobuf'

require 'google/api/annotations_pb'
require 'google/protobuf/empty_pb'
require 'io/common/common_objects_pb'
require 'io/common/distribution_pb'


descriptor_data = "\n io/core/a_rpc_distribution.proto\x12\x02io\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x1eio/common/common_objects.proto\x1a\x1cio/common/distribution.proto2\xa2\r\n\x0c\x44istribution\x12\xaf\x01\n\x10sendWelcomeEmail\x12\x1c.io.EmailDistributionRequest\x1a\x16.google.protobuf.Empty\"e\x92\x41\x44\x12\x12Send Welcome Email\x1a.Sends a welcome email to an individual record.\x82\xd3\xe4\x93\x02\x18\"\x13/distribution/email:\x01*\x12\xdd\x01\n\x10getSmartPassLink\x12\x18.io.SmartPassLinkRequest\x1a\x07.io.Url\"\xa5\x01\x92\x41|\x12\x12Get SmartPass Link\x1a\x66Get SmartPass returns encrypted SmartPass link based on a pass payload for a member, coupon or ticket.\x82\xd3\xe4\x93\x02 \"\x1b/distribution/smartpasslink:\x01*\x12\xc5\x02\n\x1bgetDataCollectionPageFields\x12\x14.io.ClassObjectInput\x1a\x18.io.DataCollectionFields\"\xf5\x01\x92\x41\xd5\x01\x12\x1fGet Data Collection Page Fields\x1anRetrieves a list of fields used on the data collection page. ClassId is required only for the Member protocol.J\"\n\x03\x34\x30\x33\x12\x1b\n\x19User lacks authorization.J\x1e\n\x03\x34\x30\x34\x12\x17\n\x15Record was not found.\x82\xd3\xe4\x93\x02\x16\x12\x14/distribution/fields\x12\x98\x02\n\x12uploadSmartPassCsv\x12\x1d.io.SmartPassCsvUploadRequest\x1a\x16.google.protobuf.Empty\"\xca\x01\x92\x41\xa4\x01\x12\x14Upload SmartPass Csv\x1a\x8b\x01Upload SmartPass Csv sends a projects short code and file bytes to be processed. Processed file will be sent to the users registered email.\x82\xd3\xe4\x93\x02\x1c\"\x17/distribution/smartpass:\x01*\x12\xdf\x01\n\x11importProtocolCsv\x12\x19.io.ImportProtocolRequest\x1a\x16.google.protobuf.Empty\"\x96\x01\x92\x41p\x12\x13Import Protocol Csv\x1aYImport protocol csv takes a formatted CSV and creates billable protocol specific records.\x82\xd3\xe4\x93\x02\x1d\"\x18/distribution/csv-import:\x01*\x12\xba\x03\n\x0fvalidateBarcode\x12\x0b.io.Payload\x1a\x0b.io.Payload\"\x8c\x03\x92\x41\xe0\x02\x12\x10Validate Barcode\x1a\xb8\x01Validate a TOTP barcode. Send the full barcode format {{payload}}||{{key}||{{timestamp}}||{{totp}}. If TOTP is valid and recent, the barcode payload without TOTP data will be returned.JL\n\x03\x34\x30\x30\x12\x45\nCBarcode payload provided was not in a format recognized by PassKit.JC\n\x03\x34\x30\x31\x12<\n:The barcode TOTP was not valid and should not be accepted.\x82\xd3\xe4\x93\x02\"\"\x1d/distribution/validateBarcode:\x01*B\x81\x07\n\x10\x63om.passkit.grpcZ$stash.passkit.com/io/model/sdk/go/io\xaa\x02\x0cPassKit.Grpc\x92\x41\xb6\x06\x12\xf1\x01\n\x18PassKit Distribution API\x12ZAPI for generating SmartPass links and distribution of your passes via different channels.\x1a\x38https://passkit.com/legal/terms-of-subscription-service/\"?\n\x0fPassKit Support\x12\x17https://docs.passkit.io\x1a\x13support@passkit.com*\x01\x02\x32\x10\x61pplication/json:\x10\x61pplication/jsonR9\n\x03\x32\x30\x30\x12\x32\n(Returned when the request is successful.\x12\x06\n\x04\x9a\x02\x01\x07R4\n\x03\x34\x30\x30\x12-\n+Returned when wrong user input is provided.R0\n\x03\x34\x30\x31\x12)\n\'Returned when the user is unauthorized.RP\n\x03\x34\x30\x33\x12I\nGReturned when the user does not have permission to access the resource.R;\n\x03\x34\x30\x34\x12\x34\n*Returned when the resource does not exist.\x12\x06\n\x04\x9a\x02\x01\x07R<\n\x03\x35\x30\x30\x12\x35\n+Returned when there is an unexpected error.\x12\x06\n\x04\x9a\x02\x01\x07RW\n\x03\x35\x30\x33\x12P\nNServer is unavailable. Back off for 250ms and repeat request until successful.Z>\n<\n\napiKeyAuth\x12.\x08\x02\x12\x19JWT Authentication token.\x1a\rAuthorization \x02\x62\x10\n\x0e\n\napiKeyAuth\x12\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool
pool.add_serialized_file(descriptor_data)

module Io
end
