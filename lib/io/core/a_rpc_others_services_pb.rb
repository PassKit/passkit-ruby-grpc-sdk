# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: io/core/a_rpc_others.proto for package 'io'

require 'grpc'
require 'io/core/a_rpc_others_pb'

module Io
  module Users
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'io.Users'

      rpc :createUser, ::Io::NewUser, ::Io::NewUserResponse
      rpc :newUser, ::Io::NewUser, ::Io::JWT
      rpc :verify, ::Io::VerifyRequest, ::Io::Boolean
      rpc :resendVerificationEmail, ::Google::Protobuf::Empty, ::Io::Boolean
      rpc :getUser, ::Google::Protobuf::Empty, ::Io::GetUserResponse
      rpc :login, ::Io::Credentials, ::Io::JWT
      rpc :get2faBarcode, ::Google::Protobuf::Empty, ::Io::Url
      rpc :resetPassword, ::Io::Credentials, ::Google::Protobuf::Empty
      rpc :sendPasswordResetLink, ::Io::Username, ::Google::Protobuf::Empty
      rpc :changePassword, ::Io::PasswordResetInput, ::Google::Protobuf::Empty
      rpc :changeEmail, ::Io::Email, ::Google::Protobuf::Empty
      rpc :confirmEmailChange, ::Io::ConfirmEmailChangeInput, ::Google::Protobuf::Empty
      rpc :updateCompanyName, ::Io::CompanyName, ::Google::Protobuf::Empty
      rpc :getProjectsForUserQueryDeprecated, ::Io::Pagination, stream(::Io::Project)
      rpc :getProjectsQueryDeprecated, ::Io::Pagination, stream(::Io::Project)
      rpc :getProjectsForUserQuery, ::Io::Filters, stream(::Io::Project)
      rpc :getProjectsQuery, ::Io::Filters, stream(::Io::Project)
      rpc :getProjectByUuid, ::Io::Id, ::Io::Project
      rpc :getProjectAndTemplateByShortCode, ::Io::Id, ::Io::ProjectByShortCodeResult
      rpc :getProjectsForUser, ::Io::ProjectStatusFilter, stream(::Io::Project)
      rpc :getProjects, ::Io::ProjectStatusFilter, stream(::Io::Project)
      rpc :getScannerConfig, ::Google::Protobuf::Empty, ::Io::ScannerConfiguration
      rpc :createScannerConfig, ::Io::ScannerConfiguration, ::Google::Protobuf::Empty
      rpc :updateScannerConfig, ::Io::ScannerConfiguration, ::Io::ScannerConfiguration
      # Creates a new oauth2 resource, the returned id is NOT the access token used to make requests on the users behalf.
      rpc :createAuthorizationResource, ::Io::OAuth2AuthorizationRequest, ::Io::Id
      rpc :deleteAuthorizationResource, ::Io::Id, ::Google::Protobuf::Empty
      rpc :refreshApiSecret, ::Google::Protobuf::Empty, ::Google::Protobuf::Empty
      rpc :deleteAccount, ::Io::DeleteAccountRequest, ::Google::Protobuf::Empty
      rpc :revokeLegacyCredentials, ::Google::Protobuf::Empty, ::Google::Protobuf::Empty
      # Team Members
      rpc :createTeamMember, ::Io::NewTeamMember, ::Io::Id
      rpc :createPermissionsForTeamMember, ::Io::TeamMemberPermissions, ::Io::Id
      rpc :updateTeamMemberPermissions, ::Io::TeamMemberPermissions, ::Io::TeamMemberPermissions
      rpc :patchTeamMemberPermissions, ::Io::TeamMemberPermissions, ::Io::TeamMemberPermissions
      rpc :getTeamMember, ::Io::Id, ::Io::GetTeamMemberResponse
      rpc :getTeamMembers, ::Google::Protobuf::Empty, stream(::Io::ListTeamMembersResponse)
      rpc :deleteTeamMember, ::Io::Id, ::Google::Protobuf::Empty
      rpc :getTeamMemberLogs, ::Io::AuditLogRequest, stream(::Io::AuditLog)
    end

    Stub = Service.rpc_stub_class
  end
  module Integrations
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'io.Integrations'

      rpc :createIntegrations, ::Io::IntegrationConfigs, ::Io::Id
      rpc :getIntegrations, ::Io::ProtocolIdInput, ::Io::IntegrationConfigs
      rpc :updateIntegrations, ::Io::IntegrationConfigs, ::Io::Id
      rpc :deleteIntegrations, ::Io::ProtocolIdInput, ::Google::Protobuf::Empty
      rpc :createSinkSubscription, ::Io::SinkSubscription, ::Io::Id
      rpc :getSinkSubscription, ::Io::SubscriptionRequest, ::Io::SinkSubscription
      rpc :listSinkSubscriptionsDeprecated, ::Io::ListRequestDeprecated, stream(::Io::SinkSubscription)
      rpc :listSinkSubscriptions, ::Io::ListRequest, stream(::Io::SinkSubscription)
      rpc :updateSinkSubscription, ::Io::SinkSubscription, ::Io::Id
      rpc :deleteSinkSubscription, ::Io::SubscriptionRequest, ::Google::Protobuf::Empty
      rpc :getSampleSubscriptionEvent, ::Io::Id, ::Io::SinkSubscription
      rpc :callDynamicApi, ::Io::DynamicApiInput, ::Io::DynamicApiResponse
    end

    Stub = Service.rpc_stub_class
  end
end
