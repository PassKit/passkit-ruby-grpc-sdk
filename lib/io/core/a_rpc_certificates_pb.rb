# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/core/a_rpc_certificates.proto

require 'google/protobuf'

require 'google/api/annotations_pb'
require 'google/protobuf/empty_pb'
require 'io/common/common_objects_pb'
require 'io/certificate/certificate_pb'
require 'io/common/pagination_pb'
require 'io/common/filter_pb'


descriptor_data = "\n io/core/a_rpc_certificates.proto\x12\x02io\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1eio/common/common_objects.proto\x1a io/certificate/certificate.proto\x1a\x1aio/common/pagination.proto\x1a\x16io/common/filter.proto\x1a.protoc-gen-openapiv2/options/annotations.proto2\xe8\x0e\n\x0c\x43\x65rtificates\x12\xdc\x01\n\x17getAppleCertificateData\x12\x16.io.PassTypeIdentifier\x1a\x13.io.CertificateData\"\x93\x01\x92\x41o\x12\x1aGet Apple pass certificate\x1aQGets the certificate data for certificate with Pass Type Identifier {passTypeId}.\x82\xd3\xe4\x93\x02\x1b\x12\x19/certificate/{passTypeId}\x12\xd5\x01\n\x1cgetCertificateSigningRequest\x12\x16.google.protobuf.Empty\x1a\x1d.io.CertificateSigningRequest\"~\x92\x41K\x12%Get CSR (Certificate Signing Request)\x1a\"Gets a CSR for the logged in user.\x82\xd3\xe4\x93\x02*\x12(/certificate/certificate_signing_request\x12\xa2\x01\n\x13\x61\x64\x64\x41ppleCertificate\x12\r.io.FileBytes\x1a\x13.io.CertificateData\"g\x92\x41;\x12\x15\x41\x64\x64 Apple certificate\x1a\"Uploads an Apple pass certificate.\x82\xd3\xe4\x93\x02#\"\x1e/certificate/apple_certificate:\x01*\x12\xbb\x01\n\x16updateAppleCertificate\x12\r.io.FileBytes\x1a\x13.io.CertificateData\"}\x92\x41Q\x12\x18Update Apple certificate\x1a\x35Updates or renews an existing Apple pass certificate.\x82\xd3\xe4\x93\x02#\x1a\x1e/certificate/apple_certificate:\x01*\x12\xbb\x01\n\x1flistAppleCertificatesDeprecated\x12\x0e.io.Pagination\x1a\x13.io.CertificateData\"q\x92\x41Y\x12)List Apple pass certificates [DEPRECATED]\x1a,Retrieves a users certificates [DEPRECATED].\x82\xd3\xe4\x93\x02\x0f\x12\r/certificates0\x01\x12\xa1\x01\n\x15listAppleCertificates\x12\x0b.io.Filters\x1a\x13.io.CertificateData\"d\x92\x41>\x12\x1cList Apple pass certificates\x1a\x1eRetrieves a users certificates\x82\xd3\xe4\x93\x02\x1d\"\x18/certificates/apple/list:\x01*0\x01\x12\xe0\x01\n countAppleCertificatesDeprecated\x12\x0e.io.Pagination\x1a\t.io.Count\"\xa0\x01\x92\x41\x81\x01\x12*Count Apple pass certificates [DEPRECATED]\x1aSRetrieves the total count of pass certificates for the logged in user [DEPRECATED].\x82\xd3\xe4\x93\x02\x15\x12\x13/certificates/count\x12\xc1\x01\n\x16\x63ountAppleCertificates\x12\x0b.io.Filters\x1a\t.io.Count\"\x8e\x01\x92\x41g\x12\x1d\x43ount Apple pass certificates\x1a\x46Retrieves the total count of pass certificates for the logged in user.\x82\xd3\xe4\x93\x02\x1e\"\x19/certificates/apple/count:\x01*\x12\xb4\x02\n\x19sendNFCSigningCredentials\x12 .io.NFCSigningCredentialsRequest\x1a\x16.google.protobuf.Empty\"\xdc\x01\x92\x41\xab\x01\x12\x1cSend NFC signing credentials\x1a\x8a\x01Sends the NFC signing credentials for a certificate to the registered email address of the user. Only works with NFC enabled certificates.\x82\xd3\xe4\x93\x02\'\"\"/certificates/nfc/credentials/send:\x01*B\xd8\x06\n\x10\x63om.passkit.grpcZ$stash.passkit.com/io/model/sdk/go/io\xaa\x02\x0cPassKit.Grpc\x92\x41\x8d\x06\x12\xda\x01\n\x18PassKit Certificates API\x12\x43\x41PI for managing Apple Wallet Pass Type Identifiers & Certificates.\x1a\x38https://passkit.com/legal/terms-of-subscription-service/\"?\n\x0fPassKit Support\x12\x17https://docs.passkit.io\x1a\x13support@passkit.com*\x01\x02\x32\x10\x61pplication/json:\x10\x61pplication/jsonR9\n\x03\x32\x30\x30\x12\x32\n(Returned when the request is successful.\x12\x06\n\x04\x9a\x02\x01\x07R4\n\x03\x34\x30\x30\x12-\n+Returned when wrong user input is provided.R0\n\x03\x34\x30\x31\x12)\n\'Returned when the user is unauthorized.RP\n\x03\x34\x30\x33\x12I\nGReturned when the user does not have permission to access the resource.R;\n\x03\x34\x30\x34\x12\x34\n*Returned when the resource does not exist.\x12\x06\n\x04\x9a\x02\x01\x07R<\n\x03\x35\x30\x30\x12\x35\n+Returned when there is an unexpected error.\x12\x06\n\x04\x9a\x02\x01\x07RW\n\x03\x35\x30\x33\x12P\nNServer is unavailable. Back off for 250ms and repeat request until successful.Z>\n<\n\napiKeyAuth\x12.\x08\x02\x12\x19JWT Authentication token.\x1a\rAuthorization \x02\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool
pool.add_serialized_file(descriptor_data)

module Io
end
